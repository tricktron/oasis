name: Build Rootfs

on:
  push:
    branches: [ main, f-oasis-in-nix-shell ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FORCE_COLOR: 2

jobs:
  build-qemu-initramfs:
    name   : Build Oasis Initramfs
    if  : ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3
      
      - name: Setup QEMU rootfs
        run : |
          curl -L -o rootfs.tar https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/rootfs-x86_64.tar
          curl -L -o etc.tar https://github.com/tricktron/oasis-etc/releases/download/v1.0.0-alpha/etc.tar
          tar -xvf rootfs.tar
          mkdir etc && tar -C etc -xvf etc.tar
          cp -r etc out/root.git

      - name: Setup root & oasis user
        run : |
          sudo chown -R root:root out/root.git
          cd out/root.git
          sudo libexec/applyperms
          sudo libexec/applyperms -d etc
          sudo mkdir home/oasis
          sudo chown -R 1000:1000 home/oasis
      
      - name: Create initramfs
        run : |
          sudo chmod +r out/root.git/etc/doas.conf
          sudo chmod +r out/root.git/etc/shadow
          cd out/root.git && sudo find . | cpio --quiet -H newc -o > ../../initrd.cpio

      - name: Upload initramfs artifact
        if  : ${{ false }}  # disable for now
        uses: actions/upload-artifact@v3
        with:
          name: initrd.cpio
          path: initrd.cpio
      
      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Create boot directory
        run : |
          mkdir -p oasis-iso/boot/grub
          curl -L -o oasis-iso/boot/bzImage-initrd https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/bzImage-initrd
          cp initrd.cpio oasis-iso/boot
          cat > oasis-iso/boot/grub/grub.cfg << EOF
          set default=0
          set timeout=5
          if loadfont /boot/grub/fonts/unicode.pf2; then
            set gfxmode=auto
            insmod all_video
            terminal_output gfxterm
          fi

          menuentry "Oasis, Linux 5.15" {
            linux /boot/bzImage-initrd rdinit=/bin/sinit rootfstype=tmpfs console=tty0 net.ifnames=0
            initrd /boot/initrd.cpio
          }
          EOF

      - name: Build oasis grub bios iso
        run : nix develop .#grub2_bios -c grub-mkrescue --xorriso=$(which xorriso) -o oasis-bios.iso oasis-iso
      
      - name: Upload oasis iso artifact
        uses: actions/upload-artifact@v3
        with:
          name: oasis-bios.iso
          path: oasis-bios.iso

  build-qemu-nix:
    name   : Build Oasis Nix Qemu
    runs-on: ubuntu-22.04
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3
      
      - name: Setup QEMU rootfs
        run : |
          curl -L -o rootfs.tar https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/rootfs-x86_64.tar
          curl -L -o etc.tar https://github.com/tricktron/oasis-etc/releases/download/v1.0.0-alpha/nix-etc.tar
          tar -xvf rootfs.tar
          mkdir etc && tar -C etc -xvf etc.tar
          cp -r etc out/root.git

      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Install extra packages not in oasis-root
        run : |
          nix build .#extra-bin
          cp -Lr result/bin/* out/root.git/bin

      - name: Copy Nix Closure Info
        run : |
          nix build .#nixClosureInfo
          cp -Lr result/registration out/root.git/.reginfo
          cp -Lr result/* out/root.git

      - name: Setup root & oasis user
        run : |
          sudo chown -R root:root out/root.git
          cd out/root.git
          sudo libexec/applyperms
          sudo libexec/applyperms -d etc
          sudo mkdir home/oasis
          sudo chown -R 1000:1000 home/oasis
      
      - name: Create initramfs
        run : |
          sudo chmod +r out/root.git/etc/doas.conf
          sudo chmod +r out/root.git/etc/shadow
          cd out/root.git && sudo find . | cpio --quiet -H newc -o > ../../initrd.cpio

      - name: Upload initramfs artifact
        if  : ${{ false }}  # disable for now
        uses: actions/upload-artifact@v3
        with:
          name: initrd.cpio
          path: initrd.cpio

      - name: Create boot directory
        run : |
          mkdir -p oasis-iso/boot/grub
          curl -L -o oasis-iso/boot/bzImage-initrd https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/bzImage-initrd
          cp initrd.cpio oasis-iso/boot
          cat > oasis-iso/boot/grub/grub.cfg << EOF
          set default=0
          set timeout=5
          if loadfont /boot/grub/fonts/unicode.pf2; then
            set gfxmode=auto
            insmod all_video
            terminal_output gfxterm
          fi

          menuentry "Oasis Nix, Linux 5.15" {
            linux /boot/bzImage-initrd rdinit=/bin/sinit rootfstype=tmpfs console=tty0 net.ifnames=0
            initrd /boot/initrd.cpio
          }
          EOF

      - name: Build oasis grub bios iso
        run : nix develop .#grub2_bios -c grub-mkrescue --xorriso=$(which xorriso) -o oasis-nix-bios.iso oasis-iso
      
      - name: Upload oasis iso artifact
        uses: actions/upload-artifact@v3
        with:
          name: oasis-nix-bios.iso
          path: oasis-nix-bios.iso

  build-zen-initramfs:
    name   : Build zen initramfs
    if  : ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3
      
      - name: Setup QEMU rootfs
        run : |
          curl -L -o rootfs.tar https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/rootfs-x86_64.tar
          curl -L -o etc.tar https://github.com/tricktron/oasis-etc/releases/download/v1.0.0-alpha/zen-etc.tar
          curl -L -o oasis-zen.tar https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/oasis-zen.tar
          tar -xvf rootfs.tar
          tar -xvf oasis-zen.tar 
          mkdir etc && tar -C etc -xvf etc.tar
          cp -r etc out/root.git
          cp -r oasis-zen/lib/modules out/root.git/lib

      - name: Setup root & oasis user
        run : |
          sudo chown -R root:root out/root.git
          cd out/root.git
          sudo libexec/applyperms
          sudo libexec/applyperms -d etc
          sudo mkdir home/oasis
          sudo chown -R 1000:1000 home/oasis
      
      - name: Create initramfs
        run : |
          sudo chmod +r out/root.git/etc/doas.conf
          sudo chmod +r out/root.git/etc/shadow
          cd out/root.git && sudo find . | cpio --quiet -H newc -o > ../../zen-initrd.cpio

      - name: Upload initramfs artifact
        uses: actions/upload-artifact@v3
        with:
          name: zen-initrd.cpio
          path: zen-initrd.cpio
      
      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Create boot directory
        run : |
          mkdir -p oasis-iso/boot/grub
          cp zen-initrd.cpio oasis-iso/boot
          cp oasis-zen/bzImage oasis-iso/boot/zen-bzImage
          cp oasis-zen/System.map oasis-iso/boot
          cat > oasis-iso/boot/grub/grub.cfg << EOF
          set default=0
          set timeout=5
          if loadfont /boot/grub/fonts/unicode.pf2; then
            set gfxmode=auto
            insmod all_video
            terminal_output gfxterm
          fi

          menuentry "Oasis, Linux 5.15" {
            linux /boot/zen-bzImage rdinit=/bin/sinit rootfstype=tmpfs console=tty0 net.ifnames=0
            initrd /boot/zen-initrd.cpio
          }
          EOF

      - name: Build oasis zen grub efi iso
        run : nix develop .#grub2_efi -c grub-mkrescue --xorriso=$(which xorriso) -o oasis-zen-efi.iso oasis-iso
      
      - name: Upload oasis iso artifact
        uses: actions/upload-artifact@v3
        with:
          name: oasis-zen-efi.iso
          path: oasis-zen-efi.iso

  build-oasis-initramfs:
    name   : Build oasis initramfs
    if  : ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    # needs  : build-oasis-kernel
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3

     # - name: Download oasis kernel
     #   uses: actions/download-artifact@v3
     #   with:
     #     name: oasis-kernel.tar.xz
      
      - name: Setup oasis rootfs
        run : |
          curl -L -o rootfs.tar https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/rootfs-x86_64.tar
          curl -L -o etc.tar https://github.com/tricktron/oasis-etc/releases/download/v1.0.0-alpha/zen-etc.tar
          curl -L -o oasis-kernel.tar.xz https://github.com/tricktron/oasis/releases/download/v1.0.0-alpha/oasis-kernel.tar.xz
          tar -xvf rootfs.tar
          tar -xvf oasis-kernel.tar.xz 
          mkdir etc && tar -C etc -xvf etc.tar
          cp -r etc out/root.git
          cp -r oasis-kernel/lib/* out/root.git/lib

      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Install extra packages not in oasis-root
        run : |
          nix build .#extra-bin
          cp -Lr result/bin/* out/root.git/bin

      - name: Setup root & oasis user
        run : |
          sudo chown -R root:root out/root.git
          cd out/root.git
          sudo libexec/applyperms
          sudo libexec/applyperms -d etc
          sudo mkdir home/oasis
          sudo chown -R 1000:1000 home/oasis
      
      - name: Create initramfs
        run : |
          sudo chmod +r out/root.git/etc/doas.conf
          sudo chmod +r out/root.git/etc/shadow
          cd out/root.git && sudo find . | cpio --quiet -H newc -o | zstd -19 > ../../oasis-initrd.cpio.zst

      - name: Upload initramfs artifact
        if  : ${{ false }}  # disable for now
        uses: actions/upload-artifact@v3
        with:
          name: oasis-initrd.cpio.zst
          path: oasis-initrd.cpio.zst
      
      - name: Create boot directory
        run : |
          mkdir -p oasis-iso/boot/grub
          cp oasis-initrd.cpio.zst oasis-iso/boot/initrd.cpio.zst
          cp oasis-kernel/bzImage oasis-iso/boot/bzImage
          cp oasis-kernel/System.map oasis-iso/boot
          cat > oasis-iso/boot/grub/grub.cfg << EOF
          set default=0
          set timeout=5
          if loadfont /boot/grub/fonts/unicode.pf2; then
            set gfxmode=auto
            insmod all_video
            terminal_output gfxterm
          fi

          menuentry "Oasis, Linux" {
            linux /boot/bzImage rdinit=/bin/sinit rootfstype=tmpfs
            initrd /boot/initrd.cpio.zst
          }
          EOF

      - name: Build oasis grub efi iso
        run : nix develop .#grub2_efi -c grub-mkrescue --xorriso=$(which xorriso) -o oasis-efi.iso oasis-iso
      
      - name: Upload oasis iso artifact
        uses: actions/upload-artifact@v3
        with:
          name: oasis-efi.iso
          path: oasis-efi.iso
        
  build-qemu-kernel:
    name   : Build Oasis QEMU kernel
    if  : ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      - name: Build oasis QEMU kernel
        run : nix build .#oasis-qemu-kernel-initrd

      - name: Upload kernel
        run: echo "UPLOAD_PATH=$(readlink -f result)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v3
        with:
          name: oasis-5_15
          path: ${{ env.UPLOAD_PATH }}

  build-zen-kernel:
    name   : Build zen kernel
    if  : ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      - name: Build oasis zen kernel
        run : nix build .#oasis-zen-kernel

      - name: Upload kernel
        run: echo "UPLOAD_PATH=$(readlink -f result)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v3
        with:
          name: oasis-zen
          path: ${{ env.UPLOAD_PATH }}

  build-oasis-kernel:
    name   : Build oasis kernel
    if  : ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    steps  :
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to pull and push binary cache
        uses: cachix/cachix-action@v11
        with:
          name     : tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      - name: Build oasis kernel
        run : nix build .#oasis-kernel

      - name: Upload kernel
        run: |
          mkdir oasis-kernel
          cp -Lr result/* oasis-kernel
          tar -cJf oasis-kernel.tar.xz oasis-kernel
      - uses: actions/upload-artifact@v3
        with:
          name: oasis-kernel.tar.xz
          path: oasis-kernel.tar.xz

  build-rootfs:
    name: Build Rootfs x86_64
    if: ${{ false }}  # disable for now
    runs-on: ubuntu-22.04
    steps:
      - name: Clone Repository
        uses: actions/checkout@v3

      - name: Install Nix with flakes support
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            substituters = https://cache.nixos.org https://tricktron.cachix.org
            trusted-public-keys = tricktron.cachix.org-1:N1aBeQuELyEAOgvizaDC/qqFltwv7N7oSMaNozyDz6w= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
            allowed-users = *
            accept-flake-config = true

      - name: Use Cachix to Pull and Push Binary Cache
        uses: cachix/cachix-action@v11
        with:
          name: tricktron
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          extraPullNames: tricktron

      - name: Cache dev shell
        run: nix develop

      - name: Setup Git user to apply patches and commit
        run: |
          git config --global user.email oasis
          git config --global user.name oasis

      - name: Build
        run: |
          nix develop -c lua setup.lua 
          nix develop -c samu commit
      
      - name: Checkout master to trigger Git hook to get all files
        run: cd out/root.git && git checkout master
      
      - name: Tar rootfs
        run: tar -C out -cvf rootfs-x86_64.tar root.git

      - name: Upload rootfs artifact
        uses: actions/upload-artifact@v3
        with:
          name: rootfs-x86_64
          path: rootfs-x86_64.tar



